/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package hashmap.tree.intersection;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test public void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue("someLibraryMethod should return 'true'", classUnderTest.someLibraryMethod());
    }
    @Test public void binaryduplicate(){
        BinaryTree binaryTree=new BinaryTree();
        Node root=new Node(150);
        root.left=new Node(100);
        root.right=new Node(250);
        root.left.left=new Node(75);
        root.left.right=new Node(160);
        root.left.right.right=new Node(175);
        root.left.right.left=new Node(125);
        root.right.left=new Node(200);
        root.right.right=new Node(350);
        root.right.right.left=new Node(300);
        root.right.right.right=new Node(500);
        binaryTree.preOrder(root);
//        System.out.println(binaryTree.arrayList);
        BinaryTree binaryTree1=new BinaryTree();
        Node root1=new Node(42);
        root1.left=new Node(100);
        root1.right=new Node(600);
        root1.left.left=new Node(15);
        root1.left.right=new Node(160);
        root1.left.right.right=new Node(175);
        root1.left.right.left=new Node(125);
        root1.right.left=new Node(200);
        root1.right.right=new Node(350);
        root1.right.right.left=new Node(4);
        root1.right.right.right=new Node(500);
        binaryTree1.preOrder(root1);
        String result="[100, 160, 125, 175, 200, 350, 500]";
        assertEquals("test for binarytree",result,String.valueOf(Library.addDuplicateValue(binaryTree.arrayList,binaryTree1.arrayList)));
    }
    @Test public void duplicatvalue(){
        BinaryTree binaryTree=new BinaryTree();
        Node root=new Node(150);
        root.left=new Node(100);
        root.right=new Node(250);
        root.left.left=new Node(75);
        root.left.right=new Node(160);
        root.left.right.right=new Node(175);
        root.left.right.left=new Node(125);
        root.right.left=new Node(200);
        root.right.right=new Node(350);
        root.right.right.left=new Node(300);
        root.right.right.right=new Node(500);
        binaryTree.preOrder(root);
//        System.out.println(binaryTree.arrayList);
        BinaryTree binaryTree1=new BinaryTree();
        Node root1=new Node(160);
        root1.left=new Node(100);
        root1.right=new Node(600);
        root1.left.left=new Node(160);
        root1.left.right=new Node(160);
        root1.left.right.right=new Node(175);
        root1.left.right.left=new Node(125);
        root1.right.left=new Node(200);
        root1.right.right=new Node(350);
        root1.right.right.left=new Node(160);
        root1.right.right.right=new Node(500);
        binaryTree1.preOrder(root1);
        String result="[160, 100, 125, 175, 200, 350, 500]";
        assertEquals("test for duplicate value inside binarytree",result,String.valueOf(Library.addDuplicateValue(binaryTree.arrayList,binaryTree1.arrayList)));
    }
}
