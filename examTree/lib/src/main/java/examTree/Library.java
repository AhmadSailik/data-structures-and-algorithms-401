/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package examTree;

public class Library {
    public boolean someLibraryMethod() {

        return true;
    }
//    public static boolean isSematric(BinaryTree binaryTree){
//    binaryTree.inOrder(binaryTree.root);
//    if (binaryTree.root==null){
//        return false;
//    }
//    return checkSematric(binaryTree.root.left, binaryTree.root.right);
//    }
//    public static boolean checkSematric(Node node1,Node node2){
//        if (node1!=null&&node2!=null){
//            System.out.println(node1.value+" "+ node2.value);
//        }
//        if (node1==null&&node2==null){
//            return true;
//        }else if(node1==null||node2==null){
//            return false;
//        }else if(node1.value!=node2.value){
//            return false;
//        }else {
//            checkSematric(node1.left,node2.right);
//            checkSematric(node1.right,node2.left);
//        }
//        return true;
//    }
    public static boolean isIdintical(BinaryTree binaryTree1,BinaryTree binaryTree2){
        if (binaryTree1.root==null||binaryTree2.root==null){
            return false;
        }
       return checkIdintical(binaryTree1.root,binaryTree2.root);
    }
    public static boolean checkIdintical(Node node1,Node node2){
        if (node1!=null&&node2!=null){
            System.out.println(node1.value+" "+ node2.value);
        }
//        if (node1==null&&node2==null){
//            return true;
//        }else if(node1==null||node2==null){
//            return false;
//        }else if(node1.value!=node2.value){
//            return false;
//        }else {
            checkIdintical(node1.left,node2.left);
//            checkIdintical(node1.right,node2.right);
//        }
        return true;
    }

    public static void main(String[] args) {
//        BinaryTree binaryTree=new BinaryTree();
//        binaryTree.root=new Node(40);
//        binaryTree.root.left=new Node(50);
//        binaryTree.root.left.left=new Node(80);
//        binaryTree.root.left.left.right=new Node(100);
//        binaryTree.root.left.left.left=new Node(110);
//        binaryTree.root.left.right=new Node(90);
//        binaryTree.root.right=new Node(50);
//        binaryTree.root.right.left=new Node(90);
//        binaryTree.root.right.right=new Node(80);
//        binaryTree.root.right.right.left=new Node(100);
//        binaryTree.root.right.right.right=new Node(110);
//        System.out.println(isSematric(binaryTree));
        BinaryTree binaryTree1=new BinaryTree();
        binaryTree1.root=new Node(40);
        binaryTree1.root.left=new Node(50);
        binaryTree1.root.left.left=new Node(80);
        binaryTree1.root.left.right=new Node(90);
        binaryTree1.root.right=new Node(100);
        binaryTree1.root.right.left=new Node(110);
        binaryTree1.root.right.right=new Node(120);
        BinaryTree binaryTree2=new BinaryTree();
        binaryTree2.root=new Node(40);
        binaryTree2.root.left=new Node(50);
        binaryTree2.root.left.left=new Node(80);
        binaryTree2.root.left.right=new Node(90);
        binaryTree2.root.right=new Node(100);
        binaryTree2.root.right.left=new Node(110);
        binaryTree2.root.right.right=new Node(120);
        System.out.println(isIdintical(binaryTree1,binaryTree2));

//        BinarySearch binarySearch=new BinarySearch();
//        binarySearch.add(40);
//        binarySearch.add(20);
//        binarySearch.add(50);
//        binarySearch.add(100);
//        binarySearch.add(10);
//        binarySearch.add(25);
//        binarySearch.add(120);
//        binarySearch.add(45);
//        binarySearch.add(130);
//        binarySearch.add(110);
//        binarySearch.add(90);
//        binarySearch.add(42);
//        binarySearch.inOrder();
    }
}
