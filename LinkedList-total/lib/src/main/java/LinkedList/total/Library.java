/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package LinkedList.total;

public class Library {
    public boolean someLibraryMethod() {

        return true;
    }

    public static String fromEnd(LinkedList ll, int value){
       int count=0;
       Node current= ll.head;
       while (current!=null){
           count++;
           current=current.next;
       }
       if (value>count||value<0){
           return "the value not exist1";
       }else {
           current= ll.head;
           while (current!=null){
               count--;
               System.out.println(count+"v"+value);
               if (value==count){
                   return " "+current.value;
               }
               current=current.next;
           }
       }
        return "the value not exist";
    }
    public static LinkedList zip(LinkedList ll1, LinkedList ll2){
        Node current1=ll1.head;
        Node current2=ll2.head;
        LinkedList linkedList=new LinkedList();
        while (current1!=null||current2!=null){
            if (current1!=null){
                linkedList.add(current1.value);
                current1=current1.next;
            }
            if (current2!=null){
                linkedList.add(current2.value);
                current2=current2.next;
            }
        }
        return linkedList;

    }
    public static LinkedList invers(LinkedList ll){
        LinkedList linkedList=new LinkedList();
        Node current= ll.head;
        while (current!=null){
            linkedList.insert(current.value);
            current=current.next;
        }
        return linkedList;
    }
    public static boolean semtric(LinkedList ll){
        LinkedList ll2=new LinkedList();
        Node current1= ll.head;

        while (current1!=null){
            ll2.insert(current1.value);
            current1=current1.next;
        }
        Node current2= ll2.head;
        current1=ll.head;
        while (current1!=null&&current2!=null){
            if (current1.value== current2.value){
                current1=current1.next;
                current2=current2.next;
            }else {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) {
        LinkedList linkedList=new LinkedList();
        linkedList.add(1);
        linkedList.add(2);
        linkedList.add(3);
        linkedList.add(4);
        linkedList.add(4);
        linkedList.add(9);
        linkedList.add(4);
        linkedList.add(3);
        linkedList.add(2);
        linkedList.add(1);
        LinkedList linkedList2=new LinkedList();
        linkedList2.add(5);
        linkedList2.add(6);
        linkedList2.add(7);
        linkedList2.add(8);

        System.out.println(linkedList);
        System.out.println(semtric(linkedList));
//        System.out.println(invers(linkedList));
//        System.out.println(linkedList2);
//        System.out.println(zip(linkedList,linkedList2));
//        linkedList.insertBefor(8,5);
//        linkedList.insertBefor(3,2);
//        linkedList.insertAfter(8,10);
//        linkedList.insertAfter(1,11);
//        linkedList.insertAfter(2,15);

//        System.out.println(linkedList.isContain(8));

//        System.out.println(fromEnd(linkedList,6));
        LinkedList  linkedList1=new LinkedList();
        linkedList1.insert(3);
        linkedList1.insert(9);
        linkedList1.insert(8);
        linkedList1.insert(1);
//        System.out.println(linkedList1);
    }
}
